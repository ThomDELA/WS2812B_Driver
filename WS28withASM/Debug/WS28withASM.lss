
WS28withASM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001125  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000959  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b5  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  000023b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ef  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041a  00000000  00000000  00002af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3c       	cpi	r26, 0xC0	; 192
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  8e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_ZN9ledMatrixC1EhhjPh>:
		}
		RGB[3*((y+1)*width-1)  ] = tempR;
		RGB[3*((y+1)*width-1)+1] = tempG;
		RGB[3*((y+1)*width-1)+2] = tempB;
	}
}
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	fc 01       	movw	r30, r24
  9c:	60 83       	st	Z, r22
  9e:	41 83       	std	Z+1, r20	; 0x01
  a0:	64 9f       	mul	r22, r20
  a2:	a0 01       	movw	r20, r0
  a4:	11 24       	eor	r1, r1
  a6:	53 83       	std	Z+3, r21	; 0x03
  a8:	42 83       	std	Z+2, r20	; 0x02
  aa:	35 83       	std	Z+5, r19	; 0x05
  ac:	24 83       	std	Z+4, r18	; 0x04
  ae:	17 83       	std	Z+7, r17	; 0x07
  b0:	06 83       	std	Z+6, r16	; 0x06
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

000000b8 <_ZN9ledMatrix15mooveLeftSmoothEv>:

void ledMatrix::mooveLeftSmooth(){
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	dc 01       	movw	r26, r24
	for(int y=0; y<heigth; y++){
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	8c 91       	ld	r24, X
  c8:	11 97       	sbiw	r26, 0x01	; 1
  ca:	88 23       	and	r24, r24
  cc:	09 f4       	brne	.+2      	; 0xd0 <_ZN9ledMatrix15mooveLeftSmoothEv+0x18>
  ce:	5f c0       	rjmp	.+190    	; 0x18e <_ZN9ledMatrix15mooveLeftSmoothEv+0xd6>
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
		uint8_t tempR = RGB[3*y*width];
  d8:	c8 01       	movw	r24, r16
  da:	2c 91       	ld	r18, X
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 9f       	mul	r16, r18
  e0:	a0 01       	movw	r20, r0
  e2:	03 9f       	mul	r16, r19
  e4:	50 0d       	add	r21, r0
  e6:	12 9f       	mul	r17, r18
  e8:	50 0d       	add	r21, r0
  ea:	11 24       	eor	r1, r1
  ec:	16 96       	adiw	r26, 0x06	; 6
  ee:	ed 91       	ld	r30, X+
  f0:	fc 91       	ld	r31, X
  f2:	17 97       	sbiw	r26, 0x07	; 7
  f4:	e4 0f       	add	r30, r20
  f6:	f5 1f       	adc	r31, r21
  f8:	f0 80       	ld	r15, Z
		for(int x=0; x < 3*width - 1 ; x++){
  fa:	a9 01       	movw	r20, r18
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	42 0f       	add	r20, r18
 102:	53 1f       	adc	r21, r19
 104:	41 50       	subi	r20, 0x01	; 1
 106:	51 09       	sbc	r21, r1
 108:	14 16       	cp	r1, r20
 10a:	15 06       	cpc	r1, r21
 10c:	0c f5       	brge	.+66     	; 0x150 <_ZN9ledMatrix15mooveLeftSmoothEv+0x98>
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
			RGB[3*y*width +x] = RGB[3*y*width +x +1];
 112:	16 96       	adiw	r26, 0x06	; 6
 114:	4d 91       	ld	r20, X+
 116:	5c 91       	ld	r21, X
 118:	17 97       	sbiw	r26, 0x07	; 7
 11a:	82 9f       	mul	r24, r18
 11c:	f0 01       	movw	r30, r0
 11e:	83 9f       	mul	r24, r19
 120:	f0 0d       	add	r31, r0
 122:	92 9f       	mul	r25, r18
 124:	f0 0d       	add	r31, r0
 126:	11 24       	eor	r1, r1
 128:	e6 0f       	add	r30, r22
 12a:	f7 1f       	adc	r31, r23
 12c:	e4 0f       	add	r30, r20
 12e:	f5 1f       	adc	r31, r21
 130:	21 81       	ldd	r18, Z+1	; 0x01
 132:	20 83       	st	Z, r18
}

void ledMatrix::mooveLeftSmooth(){
	for(int y=0; y<heigth; y++){
		uint8_t tempR = RGB[3*y*width];
		for(int x=0; x < 3*width - 1 ; x++){
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	2c 91       	ld	r18, X
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	a9 01       	movw	r20, r18
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	42 0f       	add	r20, r18
 144:	53 1f       	adc	r21, r19
 146:	41 50       	subi	r20, 0x01	; 1
 148:	51 09       	sbc	r21, r1
 14a:	64 17       	cp	r22, r20
 14c:	75 07       	cpc	r23, r21
 14e:	0c f3       	brlt	.-62     	; 0x112 <_ZN9ledMatrix15mooveLeftSmoothEv+0x5a>
			RGB[3*y*width +x] = RGB[3*y*width +x +1];
		}
		RGB[3*((y+1)*width-1)] = tempR;
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	c2 9f       	mul	r28, r18
 154:	c0 01       	movw	r24, r0
 156:	c3 9f       	mul	r28, r19
 158:	90 0d       	add	r25, r0
 15a:	d2 9f       	mul	r29, r18
 15c:	90 0d       	add	r25, r0
 15e:	11 24       	eor	r1, r1
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	fc 01       	movw	r30, r24
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	8e 0f       	add	r24, r30
 16a:	9f 1f       	adc	r25, r31
 16c:	16 96       	adiw	r26, 0x06	; 6
 16e:	ed 91       	ld	r30, X+
 170:	fc 91       	ld	r31, X
 172:	17 97       	sbiw	r26, 0x07	; 7
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	f0 82       	st	Z, r15
 17a:	0d 5f       	subi	r16, 0xFD	; 253
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
		RGB[3*((y+1)*width-1)+2] = tempB;
	}
}

void ledMatrix::mooveLeftSmooth(){
	for(int y=0; y<heigth; y++){
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	8c 91       	ld	r24, X
 182:	11 97       	sbiw	r26, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	c8 17       	cp	r28, r24
 188:	d9 07       	cpc	r29, r25
 18a:	0c f4       	brge	.+2      	; 0x18e <_ZN9ledMatrix15mooveLeftSmoothEv+0xd6>
 18c:	a5 cf       	rjmp	.-182    	; 0xd8 <_ZN9ledMatrix15mooveLeftSmoothEv+0x20>
		for(int x=0; x < 3*width - 1 ; x++){
			RGB[3*y*width +x] = RGB[3*y*width +x +1];
		}
		RGB[3*((y+1)*width-1)] = tempR;
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	08 95       	ret

0000019a <_ZN9ledMatrix10updateLedsEPVhh>:

void ledMatrix::updateLeds(uint8_t volatile *tab, uint8_t indexByte){
	// sent as R G B
	//volatile uint8_t port = PORTB; // Have to find a way to put it in the inline sam
	//volatile uint8_t pin = 0;		 // SBI/CBI only take constant as second operand
	cli();
 19a:	f8 94       	cli
	[tab] "e" (tab),
	[indexBit] "d" (indexBit),
	[port] "I" (_SFR_IO_ADDR(PORTD)),
	[indexByte] "d" (indexByte)
	://clobbered (none as we use temp_reg for data)
	);
 19c:	88 e0       	ldi	r24, 0x08	; 8
 19e:	fb 01       	movw	r30, r22
 1a0:	01 90       	ld	r0, Z+

000001a2 <nextBit>:
	...

000001ac <nextBit0>:
 1ac:	5f 9a       	sbi	0x0b, 7	; 11
 1ae:	00 0c       	add	r0, r0
 1b0:	58 f0       	brcs	.+22     	; 0x1c8 <one>
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	00 00       	nop
 1b8:	5f 98       	cbi	0x0b, 7	; 11
	...
 1c2:	8a 95       	dec	r24
 1c4:	71 f7       	brne	.-36     	; 0x1a2 <nextBit>
 1c6:	0a c0       	rjmp	.+20     	; 0x1dc <loadByte>

000001c8 <one>:
	...
 1d4:	8a 95       	dec	r24
 1d6:	5f 98       	cbi	0x0b, 7	; 11
 1d8:	21 f7       	brne	.-56     	; 0x1a2 <nextBit>
	...

000001dc <loadByte>:
 1dc:	01 90       	ld	r0, Z+
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	4a 95       	dec	r20
 1e2:	21 f7       	brne	.-56     	; 0x1ac <nextBit0>
	sei();
 1e4:	78 94       	sei
 1e6:	08 95       	ret

000001e8 <_ZN9ledMatrix4showEv>:
ledMatrix::ledMatrix(uint8_t w, uint8_t h, uint16_t p, uint8_t *tab): width(w), heigth(h), nPixels(w*h), pin(p), RGB(tab)
{
}

void ledMatrix::show(){
	updateLeds(this->RGB, 3*this->nPixels);
 1e8:	fc 01       	movw	r30, r24
 1ea:	42 81       	ldd	r20, Z+2	; 0x02
 1ec:	24 2f       	mov	r18, r20
 1ee:	22 0f       	add	r18, r18
 1f0:	42 0f       	add	r20, r18
 1f2:	66 81       	ldd	r22, Z+6	; 0x06
 1f4:	77 81       	ldd	r23, Z+7	; 0x07
 1f6:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZN9ledMatrix10updateLedsEPVhh>
 1fa:	08 95       	ret

000001fc <main>:
		z,z,z,b,z,z,z,z
	};			
	
	 
int main(void)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	28 97       	sbiw	r28, 0x08	; 8
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
	DDRD |= 0b10000001;
 210:	8a b1       	in	r24, 0x0a	; 10
 212:	81 68       	ori	r24, 0x81	; 129
 214:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t heigth(8);
	uint8_t width(8);
	uint8_t *RGB = fleche;
	
	ledMatrix ledMat(heigth,width,0,RGB);
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	11 e0       	ldi	r17, 0x01	; 1
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	48 e0       	ldi	r20, 0x08	; 8
 220:	68 e0       	ldi	r22, 0x08	; 8
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	0e 94 4b 00 	call	0x96	; 0x96 <_ZN9ledMatrixC1EhhjPh>
	ledMat.show();
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN9ledMatrix4showEv>

	while(1){
		//_delay_ms(200);
		ledMat.mooveLeftSmooth();
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	0e 94 5c 00 	call	0xb8	; 0xb8 <_ZN9ledMatrix15mooveLeftSmoothEv>
		ledMat.show();
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN9ledMatrix4showEv>
 242:	f7 cf       	rjmp	.-18     	; 0x232 <main+0x36>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
